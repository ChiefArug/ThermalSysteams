plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = systeams_version
group = 'chiefarug.mods.thermal_systeams'// http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'systeams'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2022.09.18-1.19.2'
    accessTransformer = file 'src/main/resources/META-INF/accesstransformer.cfg'
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'systeams'
            // enable using JBR to hotswap MOAR
            // also ignore the option if someone isnt using JBR
            jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions'
            mods {
                systeams {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'systeams'
            mods {
                systeams {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'systeams'
            mods {
                systeams {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'systeams', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                systeams {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { // JEI
        url 'https://dvs1.progwml6.com/files/maven/'
    }
    maven { // Thermal
        url 'https://maven.covers1624.net/'
    }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.19.2-43.1.25'

    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    implementation fg.deobf("com.teamcofh:cofh_core:${minecraft_version}-${cofh_core_version}")
    implementation fg.deobf("com.teamcofh:thermal_core:${minecraft_version}-${thermal_core_version}")
    implementation fg.deobf("com.teamcofh:thermal_foundation:${minecraft_version}-${thermal_foundation_version}")
    implementation fg.deobf("com.teamcofh:thermal_expansion:${minecraft_version}-${thermal_expansion_version}")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "systeams",
                "Specification-Vendor"    : "ChiefArug",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : systeams_version,
                "Implementation-Vendor"   : "ChiefArug",
        ])
    }
}

// Below is modified from from tinkers build.gradle. Thank you!
def modsTomlSpec = copySpec {
    from(sourceSets.main.resources) {
        include 'META-INF/mods.toml'
        expand 'systeams_version': systeams_version,
            'minecraft_range': minecraft_range,
            'forge_range': forge_range,
            'thermal_core_range': thermal_core_range
    }
}

// This works
def buildPaths = [
    "$rootDir/out/production/resources", //IDEA
    "$rootDir/bin", // Eclipse (No idea if this is correct)
]

task replaceResources {
    // ensure directory exists, first build likes to fail
    new File("${processResources.destinationDir}/META-INF").mkdirs()
    // copy for gradle
    copy {
        outputs.upToDateWhen { false }
        with modsTomlSpec
        into processResources.destinationDir
    }
    // copy for IDEs
    buildPaths.each { path ->
        if (new File(path).exists()) {
            copy {
                outputs.upToDateWhen { false }
                with modsTomlSpec
                into path
            }
        }
    }
}

processResources {
    exclude 'META-INF/mods.toml'
    finalizedBy replaceResources
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
